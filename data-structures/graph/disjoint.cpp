#include <iostream>#include <vector>using namespace std;class disjoint_set{public:	class node	{	public:		int data;		int rank;		node* p;	};public:	node* make_set(int x)	{		node* temp;		temp=new(struct node);		temp->data=x;		temp->p=temp;		temp->rank=0;		return temp;	}	void link_set(node* x,node* y)	{		if(x->rank > y->rank)		{			y->p=x;		}		else		{			x->p=y;			if(x->rank==y->rank)			{				y->rank=y->rank+1;			}		}	}	node* find_set(node* x)	{		if(x != x->p)			x->p=find_set(x->p);		return x->p;	}	void union_set(node* x,node* y)	{		link_set(find_set(x),find_set(y));	}};int main(){	disjoint_set dsu;	int n,edges;	cin>>n>>edges;	int num;	disjoint_set::node* vertices[n];	for(int i=0;i<n;i++)	{		cin>>num;		vertices[i]=dsu.make_set(num);	}	int a,b;	for(int i=0;i<edges;i++)	{		cin>>a>>b;		dsu.union_set(vertices[a-1],vertices[b-1]);	}	return 0;}